==== Bazaar
(((Bazaar)))(((Importation, depuis Bazaar)))

Bazaar est un système de contrôle de version distribué tout comme Git, en conséquence de quoi il est assez facile de convertir un dépôt Bazaar en un dépôt Git.
Pour cela, vous aurez besoin d'importer le plugin `bzr-fastimport`.


===== Obtenir le plugin bzr-fastimport

La procédure d'installation du plugin `bzr-fastimport` est différente sur les systèmes type UNIX et sur Windows.

Dans le premier cas, le plus simple est d'installer le paquet `bzr-fastimport` avec toutes les dépendances requises.

Par exemple, sur Debian et dérivés, vous feriez comme cela :
[source,console]
----
$ sudo apt-get install bzr-fastimport
----

Avec RHEL, vous feriez ainsi :
[source,console]
----
$ sudo yum install bzr-fastimport
----

Avec Fedora, depuis la sortie de la version 22, le nouveau gestionnaire de paquets est dnf :
[source,console]
----
$ sudo dnf install bzr-fastimport
----

Si le paquet n'est pas disponible, vous pouvez l'installer en tant que plugin :
[source,console]
----
$ mkdir --parents ~/.bazaar/plugins/bzr     # crée les dossiers nécessaires aux plugins
$ cd ~/.bazaar/plugins/bzr
$ bzr branch lp:bzr-fastimport fastimport   # importe le plugin bzr-fastimport
$ cd fastimport
$ sudo python setup.py install --record=files.txt   # installe le plugin
----

Pour que ce plugin fonctionne, vous aurez aussi besoin du module Python `fastimport`.
Vous pouvez vérifier s'il est présent ou non et l'installer avec les commandes suivantes :
[source,console]
----
$ python -c "import fastimport"
Traceback (most recent call last):
  File "<string>" , line 1, in <module>
ImportError: No module named fastimport
$ pip install fastimport
----

S'il n'est pas disponible, vous pouvez le télécharger à l'adresse https://pypi.python.org/pypi/fastimport/.

Dans le second cas (sous Windows), `bzr-fastimport` est automatiquement installé avec la version _standalone_ et l'installation par défaut (laisser toutes les cases à cocher cochées).
Alors, vous n'avez rien à faire.

À ce stade, la façon d'importer un dépôt Bazaar diffère selon que vous n'avez qu'une seule branche ou que vous travaillez avec un dépôt qui a plusieurs branches.


===== Projet avec une seule branche

Maintenant positionnez-vous dans le dossier qui contient votre dépôt Bazaar et initialisez le dépôt Git :
[source,console]
----
$ cd /chemin/vers/le/depot/bzr
$ git init
----

Vous pouvez exporter simplement votre dépôt Bazaar et le convertir en un dépôt Git avec la commande suivante :
[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

Selon la taille du projet, votre dépôt Git est constitué dans un délai allant de quelques secondes à plusieurs minutes.

===== Cas d'un projet avec une branche principale et une branche de travail

Vous pouvez aussi importer un dépôt Bazaar qui contient plusieurs branches.
Supposons que vous avez deux branches : l'une représente la branche principale (monProjet.trunk), l'autre est la branche de travail (monProjet.travail).
[source,console]
----
$ ls
monProjet.trunk monProjet.travail
----

Créez le dépôt Git et placez-vous-y :
[source,console]
----
$ git init depot-git
$ cd depot-git
----

Tirez la branche principale dans le dépôt git :
[source,console]
----
$ bzr fast-export --marks=../marks.bzr --plain ../monProjet.trunk | \
git fast-import --export-marks=../marks.git
----

Tirez la branche de travail dans le dépôt git :
[source,console]
----
$ bzr fast-export --marks=../marks.bzr --plain --git-branch=travail ../monProjet.travail | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Maintenant, `git branch` vous montre la branche `master` tout comme la branche `travail`.
Vérifiez les logs pour vous assurer qu'ils sont complets et supprimez les fichiers `marks.bzr` et `marks.git`.

===== Synchroniser l'index

Quel que soit le nombre de branches que vous aviez et la méthode d'importation, votre index n'est pas synchronisé avec HEAD, et avec l'import de plusieurs branches, votre répertoire de travail n'est pas synchronisé non plus.
Cette situation se résout simplement avec la commande suivante :
[source,console]
----
$ git reset --hard HEAD
----

===== Ignorer les fichiers qui étaient ignorés avec .bzrignore

Occupons-nous maintenant des fichiers à ignorer.
Comme le format de `.bzrignore` est le même que celui de `.gitignore`, le plus simple est de renommer votre fichier `.bzrignore`.
Vous devrez aussi créer un _commit_ qui contient cette modification pour la migration :
[source,console]
----
$ git mv .bzrignore .gitignore
$ git commit -m 'Migration de Bazaar vers Git'
----

===== Envoyer votre dépôt git sur le serveur

Nous y sommes enfin !
Vous pouvez maintenant pousser votre dépôt sur son nouveau serveur d'hébergement :
[source,console]
----
$ git remote add origin git@mon-serveur-git:mon-depot-git.git
$ git push origin --all
$ git push origin --tags
----

La migration de Bazaar vers Git est maintenant terminée, vous pouvez travailler sur votre dépôt git.
