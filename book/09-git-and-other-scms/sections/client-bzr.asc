==== Git et Bazaar

Parmi tous les systèmes de contrôle de version distribués, un des plus connus est http://bazaar.canonical.com/[Bazaar].
Bazaar est libre et open source, et fait partie du http://www.gnu.org/[Projet GNU].
Il a un comportement très différent de Git.
Parfois, pour faire la même chose que Git, il vous faudra utiliser un mot-clé différent, et quelques mots-clés communs n'ont pas la même signification.
En particulier, la gestion des branches est très différente et peut être déroutante, surtout pour quelqu'un qui viendrait du monde de Git.
Toutefois, il est possible de travailler sur un dépôt Bazaar depuis un dépôt Git.

Il y a plein de projets qui permettent d'utiliser Git comme client d'un dépôt Bazaar.
Ici nous utiliserons le projet de Felipe Contreras que vous pouvez trouver à l'adresse https://github.com/felipec/git-remote-bzr.
Pour l'installer, il suffit de télécharger le fichier `git-remote-bzr` dans un dossier de votre `$PATH` et de le rendre exécutable :
[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

Vous devez aussi avoir Bazaar installé.
C'est tout !


===== Créer un dépôt Git depuis un dépôt Bazaar

C'est simple à utiliser.
Il suffit de cloner un dépôt Bazaar en préfixant son nom par `bzr::`.
Puisque Git et Bazaar font des copies complètes sur votre machine, il est possible de lier un clone Git à votre clone Bazaar local, mais ce n'est pas recommandé.
Il est beaucoup plus facile de lier votre clone Git directement au même endroit que l'est votre clone Bazaar ‒ le dépôt central.

Supposons que vous travailliez avec un dépôt distant qui se trouve à l'adresse `bzr+ssh://developpeur@monserveurbazaar:monprojet`.
Alors vous devez le cloner de la manière suivante :
[source,console]
----
$ git clone bzr::bzr+ssh://developpeur@monserveurbazaar:monprojet monProjet-Git
$ cd monProjet-Git
----

A ce stade, votre dépôt Git est créé mais il n'est pas compacté pour un usage optimal de l'espace disque.
C'est pourquoi vous devriez aussi nettoyer et compacter votre dépôt Git, surtout si c'est un gros dépôt :
[source,console]
----
$ git gc --aggressive
----


===== Les branches Bazaar

Bazaar ne vous permet de cloner que des branches, mais un dépôt peut contenir plusieurs branches, et `git-remote-bzr` peut cloner les deux.
Par exemple, pour cloner une branche :
[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

Et pour cloner le dépôt entier :
[source,console]
----
$ git clone bzr::bzr:/bzr.savannah.gnu.org/emacs emacs
----

La seconde commande clone toutes les branches contenues dans le dépôt emacs ; néanmoins il est possible de spécifier quelques branches :
[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Certains dépôts ne permettent pas de lister leurs branches, auquel cas vous devez les préciser manuellement, et même si vous pourriez spécifier la configuration dans la commande de clonage, vous pourriez trouver ceci plus facile :
[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----


===== Ignorer ce qui est ignoré avec .bzrignore

Comme le format du fichier `.bzrignore` est complètement compatible avec celui de `.gitignore`, et comme vous ne devriez pas créer de fichier `.gitignore` dans votre dépôt, il suffit de créer un lien symbolique vers `.bzrignore` pour que les potentiels changements de `.bzrignore` soient pris en compte :
[source,console]
----
$ ln -s .bzrignore .git/info/exclude
----


===== Récupérer les changements du dépôt distant

Pour récupérer les changements du dépôt distant, vous tirez les modifications comme d'habitude, en utilisant les commandes Git.
En supposant que vos modifications sont sur la branche `master`, vous fusionnez ou rebasez votre travail sur la branche `origin/master` :
[source,console]
----
$ git pull --rebase origin
----


===== Pousser votre travail sur le dépôt distant

Comme Bazaar a lui aussi le concept de _commits_ de fusion, il n'y aura aucun problème si vous poussez un _commit_ de fusion.
Donc vous créez vos branches et travaillez dessus, vous testez et validez votre travail par l'intermédiaire de _commits_ comme d'habitude, puis vous fusionnez vos modifications dans `master` et vous poussez votre travail sur le dépôt Bazaar :
[source,console]
----
$ git push origin master
----

===== Mise en garde

Le cadriciel de l'assistant de dépôt distant de Git a des limitations qui s'imposent.
En particulier, les commandes suivantes ne fonctionnent pas :

* git push origin :branche-à-effacer (Bazaar n'accepte pas de supprimer une branche de cette façon)
* git push origin ancien:nouveau (il poussera 'ancien')
* git push --dry-run origin branch (il poussera)

===== Résumé

Comme les modèles de Git et de Bazaar sont similaires, il n'y a pas beaucoup de difficulté à travailler à la frontière.
Tant que vous faites attention aux limitations, et tant que vous êtes conscient que le dépôt distant n'est pas nativement Git, tout ira bien.
